AWSTemplateFormatVersion: 2010-09-09

Resources:
  MaxDomeManageAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Manage access role for MaxDome.
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDataZoneGlueManageAccessRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonDataZoneRedshiftManageAccessRolePolicy
        - arn:aws:iam::aws:policy/AmazonDataZoneSageMakerManageAccessRolePolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: MaxDomeManageAccessRole
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true
  MaxDomeManageAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeManageAccessRole
      ManagedPolicyName: MaxDomeManageAccessPolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: RedshiftSecretStatement
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
  MaxDomeDomainExecutionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Domain execution service role for MaxDome.
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: MaxDomeDomainExecutionServiceRole
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true
  MaxDomeDomainExecutionServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeDomainExecutionServiceRole
      ManagedPolicyName: MaxDomeDomainExecutionServicePolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: SSMGetParameterStatement
            Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: 'arn:aws:ssm:*:*:parameter/amazon/datazone/profiles/*'
          - Sid: UseKMSKeyPermissionsStatement
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '*'
            Condition:
              StringEquals:
                aws:ResourceTag/EnableKeyForAmazonDataZone: 'true'
              'Null':
                aws:ResourceTag/EnableKeyForAmazonDataZone: 'false'
              StringLike:
                kms:viaService: 'ssm.*.amazonaws.com'
                kms:EncryptionContext:PARAMETER_ARN: 'arn:aws:ssm:*:*:parameter/amazon/datazone/profiles*'
  MaxDomeProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Provisioning role for MaxDome.
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: MaxDomeProvisioningRole
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true

  MaxDomeProvisioningPolicy1:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy1
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudFormationStackCreationAndTagging
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:TagResource
            Resource:
              - arn:aws:cloudformation:*:*:stack/DataZone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: CloudFormationStackManagement
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:UpdateStack
            Resource:
              - arn:aws:cloudformation:*:*:stack/DataZone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: CloudFormationStackDeletion
            Effect: Allow
            Action:
              - cloudformation:DeleteStack
            Resource:
              - arn:aws:cloudformation:*:*:stack/DataZone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: CloudFormationListStacks
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
            Resource:
              - arn:aws:cloudformation:*:*:stack/DataZone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: LakeFormationPermissionsForDataLakeValidation
            Effect: Allow
            Action:
              - lakeformation:GetDataLakeSettings
              - lakeformation:PutDataLakeSettings
              - lakeformation:RevokePermissions
              - lakeformation:ListPermissions
            Resource: '*'
          - Sid: LakeFormationPermissionsForDataLakeResourceGrant
            Effect: Allow
            Action:
              - lakeformation:RegisterResource
              - lakeformation:DeregisterResource
              - lakeformation:GrantPermissions
              - lakeformation:ListResources
            Resource: '*'
          - Sid: PermissionsToGetBlueprintTemplates
            Effect: Allow
            Action: s3:GetObject
            Resource: '*'
            Condition:
              StringNotEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: CodeCommitCreationAndTagging
            Effect: Allow
            Action:
              - codecommit:CreateRepository
              - codecommit:TagResource
            Resource: arn:aws:codecommit:*:*:datazone*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: CodeCommitDeletion
            Effect: Allow
            Action: codecommit:DeleteRepository
            Resource: arn:aws:codecommit:*:*:datazone*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: CodeCommitAccess
            Effect: Allow
            Action:
              - codecommit:GetBranch
              - codecommit:CreateCommit
              - codecommit:GetRepository
              - codecommit:GetFile
            Resource: arn:aws:codecommit:*:*:datazone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: CodeCommitListRepositories
            Effect: Allow
            Action:
              - codecommit:ListRepositories
            Resource: '*'
          - Sid: GetIAMRole
            Effect: Allow
            Action:
              - iam:GetRole
            Resource:
              - arn:aws:iam::*:role/datazone*
              - arn:aws:iam::*:role/AmazonBedrockExecution*
              - arn:aws:iam::*:role/BedrockStudio*
              - arn:aws:iam::*:role/AmazonBedrockConsumptionRole*
              - arn:aws:iam::*:role/AmazonBedrockEvaluation*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: IAMRoleAndPolicyManagement
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
            Resource:
              - arn:aws:iam::*:role/datazone*
              - arn:aws:iam::*:role/AmazonBedrockExecution*
              - arn:aws:iam::*:role/BedrockStudio*
              - arn:aws:iam::*:role/AmazonBedrockConsumptionRole*
              - arn:aws:iam::*:role/AmazonBedrockEvaluation*
              - arn:aws:iam::*:role/SageMakerUnifiedStudioQueryExecutionRole*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PermissionsBoundary:
                  - !Ref MaxDomePermissionBoundary
                  - !Ref BedrockStudioPermissionsBoundary
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IAMRoleAndPolicyManagementFromDataZone
            Effect: Allow
            Action:
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Resource:
              - arn:aws:iam::*:role/datazone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PermissionsBoundary: !Ref MaxDomePermissionBoundary
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IAMRoleTagging
            Effect: Allow
            Action: iam:TagRole
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
              - arn:aws:iam::*:role/datazone-partner-apps-*
              - arn:aws:iam::*:role/datazone_redshift_serverless_admin_role_*
              - arn:aws:iam::*:role/AmazonBedrockExecution*
              - arn:aws:iam::*:role/BedrockStudio*
              - arn:aws:iam::*:role/AmazonBedrockConsumptionRole*
              - arn:aws:iam::*:role/AmazonBedrockEvaluation*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - AmazonBedrockManaged
                  - RedshiftDb*
                  - EnableGenAIStudioPermissions
                  - EnableAmazonBedrockIDEPermissions
                  - EnableGlueWorkloadsPermissions
                  - EnableSageMakerMLWorkloadsPermissions
                  - DomainBucketName
                  - KmsKeyId
                  - LogGroupName
                  - RoleName
                  - vpcArn
          - Sid: IAMRoleTaggingForRedshift
            Effect: Allow
            Action: iam:TagRole
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - RedshiftDb*

  MaxDomeProvisioningPolicy2:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy2
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: IAMRoleTaggingForEmr
            Effect: Allow
            Action: iam:TagRole
            Resource:
              - arn:aws:iam::*:role/datazone_emr_service_role_*
              - arn:aws:iam::*:role/datazone_emr_ec2_instance_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - DataZone*
                  - for-use-with-amazon-emr-managed-policies
          - Sid: IamManageRoles
            Effect: Allow
            Action:
              - iam:DeleteRole
              - iam:ListRolePolicies
              - iam:GetRolePolicy
              - iam:ListAttachedRolePolicies
            Resource:
              - arn:aws:iam::*:role/datazone*
              - arn:aws:iam::*:role/AmazonBedrockExecution*
              - arn:aws:iam::*:role/BedrockStudio*
              - arn:aws:iam::*:role/AmazonBedrockConsumptionRole*
              - arn:aws:iam::*:role/AmazonBedrockEvaluation*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IamManageRolesFromDataZone
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:UpdateAssumeRolePolicy
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IamAttachPolicyFromService
            Effect: Allow
            Action:
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
            Resource:
              - arn:aws:iam::*:role/datazone*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PermissionsBoundary: !Ref MaxDomePermissionBoundary
          - Sid: IAMPolicyManagementFromService
            Effect: Allow
            Action:
              - iam:DeletePolicy
              - iam:CreatePolicy
              - iam:ListPolicies
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:CreatePolicyVersion
              - iam:ListPolicyVersions
              - iam:DeletePolicyVersion
            Resource: 
              - arn:aws:iam::*:policy/datazone*
              - arn:aws:iam::*:policy/connector*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: IAMPolicyManagementWithoutRequiredResources
            Effect: Allow
            Action:
              - iam:ListPolicies
            Resource: '*'
          - Sid: GlueConnectionTypeUnrestrictedAccess
            Effect: Allow
            Action:
              - glue:ListConnectionTypes
              - glue:DescribeConnectionType
            Resource: '*'
          - Sid: IAMInstanceProfileManagement
            Effect: Allow
            Action:
              - iam:GetInstanceProfile
              - iam:CreateInstanceProfile
              - iam:AddRoleToInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:DeleteInstanceProfile
            Resource: arn:aws:iam::*:instance-profile/datazone_emr_ec2_instance_profile_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: IamPassRole
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst:
                  - cloudformation.amazonaws.com
                  - glue.amazonaws.com
                  - glue-gamma.amazonaws.com
                  - glue.gamma.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - glue.amazonaws.com
                  - lakeformation.amazonaws.com
                  - redshift-serverless.amazonaws.com
                  - redshift.amazonaws.com
                  - emr-serverless.amazonaws.com
                  - airflow.amazonaws.com
                  - michigan-gamma.amazonaws.com
                  - lakeformation-gamma.aws.internal
                  - glue-gamma.amazonaws.com
                  - glue.gamma.amazonaws.com
          - Sid: IamPassRoleFromDataZone
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - sagemaker.amazonaws.com
                  - redshift-serverless.amazonaws.com
          - Sid: IamPassRoleForGlueCatalog
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/datazone_usr_role_*
              - arn:aws:iam::*:role/SageMakerUnifiedStudioQueryExecutionRole
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - glue.amazonaws.com
                  - lakeformation.amazonaws.com
                  - michigan-gamma.amazonaws.com
                  - lakeformation-gamma.aws.internal
                  - glue-gamma.amazonaws.com
          - Sid: IamPassRoleForEmrServiceRole
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/datazone_emr_service_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - elasticmapreduce.amazonaws.com
          - Sid: IamPassRoleForEmrInstanceRole
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/datazone_emr_ec2_instance_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - ec2.amazonaws.com
          - Sid: IamPassRoleToBedrock
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/AmazonBedrockExecution*
              - arn:aws:iam::*:role/BedrockStudio*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService: bedrock.amazonaws.com

  MaxDomeProvisioningPolicy3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy3
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: IamPassRoleToLambda
            Effect: Allow
            Action: iam:PassRole
            Resource: arn:aws:iam::*:role/BedrockStudio*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService: lambda.amazonaws.com
          - Sid: IamCreateServiceLinkedRoleForAoss
            Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: arn:aws:iam::*:role/aws-service-role/observability.aoss.amazonaws.com/AWSServiceRoleForAmazonOpenSearchServerless
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:AWSServiceName: observability.aoss.amazonaws.com
          - Sid: GlueDefaultDatabaseCreation
            Effect: Allow
            Action:
              - glue:CreateDatabase
              - glue:GetDatabase
            Resource:
              - arn:aws:glue:*:*:database/default
              - arn:aws:glue:*:*:catalog
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: GlueDatabaseCreationFromCloudFormation
            Effect: Allow
            Action:
              - glue:CreateDatabase
            Resource:
              - arn:aws:glue:*:*:database/*
              - arn:aws:glue:*:*:catalog
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: GlueGetDatabaseForTagging
            Effect: Allow
            Action:
              - glue:GetDatabase
            Resource:
              - arn:aws:glue:*:*:database/*
              - arn:aws:glue:*:*:catalog
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: GlueDatabaseDeletion
            Effect: Allow
            Action:
              - glue:DeleteDatabase
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: TagGlueResources
            Effect: Allow
            Action:
              - glue:TagResource
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: GetGlueConnectionToAllowTagging
            Effect: Allow
            Action: glue:GetConnection
            Resource:
              - arn:aws:glue:*:*:catalog
              - arn:aws:glue:*:*:connection/datazone-glue-network-connection-*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: GlueConnectionCreateAndDelete
            Effect: Allow
            Action:
              - glue:CreateConnection
              - glue:DeleteConnection
            Resource:
              - arn:aws:glue:*:*:connection/datazone-glue-network-connection-*
              - arn:aws:glue:*:*:catalog
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: FederatedDataGlueConnectionPermissions
            Action:
              - glue:PassConnection
              - glue:GetConnections
              - glue:GetTags
            Resource:
              - arn:aws:glue:*:*:connection/*
              - arn:aws:glue:*:*:catalog/*
            Effect: Allow
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: FederatedDataAthenaConnectionPermissions
            Action:
              - athena:CreateDataCatalog
            Resource: arn:aws:athena:*:*:datacatalog/*
            Effect: Allow
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: FederatedDataGetConnectionPermissions
            Effect: Allow
            Action:
              - glue:GetConnection
            Resource:
              - arn:aws:glue:*:*:connection/*
              - arn:aws:glue:*:*:catalog/*
          - Sid: FederatedDataConnectionTaggingPermissions
            Effect: Allow
            Action:
              - athena:TagResource
            Resource: arn:aws:athena:*:*:datacatalog/*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - federated_athena*
          - Sid: FederatedDataConnectionGlueCreateConnection
            Effect: Allow
            Action:
              - glue:CreateConnection
            Resource:
              - arn:aws:glue:*:*:catalog
              - arn:aws:glue:*:*:connection/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: FederatedDataConnectionGlueManageConnection
            Effect: Allow
            Action:
              - glue:DeleteConnection
              - glue:UpdateConnection
            Resource:
              - arn:aws:glue:*:*:connection/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: FederatedDataConnectionGlueManageConnectionOnCatalog
            Effect: Allow
            Action:
              - glue:DeleteConnection
              - glue:UpdateConnection
            Resource:
              - arn:aws:glue:*:*:catalog
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: FederatedDBAthenaServerlessPermission
            Effect: Allow
            Action:
              - serverlessrepo:GetCloudFormationTemplate
              - serverlessrepo:CreateCloudFormationTemplate
            Resource:
              - arn:aws:serverlessrepo:*:*:applications/Athena*
          - Sid: FederatedDBECRPermission
            Effect: Allow
            Action:
              - imagebuilder:GetComponent
              - imagebuilder:GetContainerRecipe
              - ecr:GetAuthorizationToken
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
            Resource:
              - arn:aws:ecr:*:*:repository/athena-federation-repository*
            Condition:
              StringEquals:
                aws:CalledViaLast: lambda.amazonaws.com
          - Sid: FederatedDBAthenaCFNPermission
            Effect: Allow
            Action:
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
            Resource:
              - arn:aws:cloudformation:*:*:transform/Serverless*
            Condition:
              StringEquals:
                aws:CalledViaLast: cloudformation.amazonaws.com
          - Sid: FederatedDBAthenaLambdaPermission
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
            Resource:
              - arn:aws:lambda:*:*:function:athenafederatedcatalog*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:CalledViaLast: cloudformation.amazonaws.com
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'

  MaxDomeProvisioningPolicy4:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy4
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: FederatedDBAthenaGetFunctionLambdaPermission
            Effect: Allow
            Action:
              - lambda:GetFunction
            Resource:
              - arn:aws:lambda:*:*:function:athenafederatedcatalog*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:CalledViaLast:
                  - athena.amazonaws.com
                  - athena.gamma.amazonaws.com
                  - cloudformation.amazonaws.com
          - Sid: FederatedDBAthenaLambdaTaggingPermission
            Effect: Allow
            Action:
              - lambda:TagResource
            Resource:
              - arn:aws:lambda:*:*:function:athenafederatedcatalog*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:CalledViaLast: cloudformation.amazonaws.com
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - aws:cloudformation:*
                  - federated_athena*
                  - lambda:createdBy
          - Sid: FederatedDBAthenaS3Permission
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3:::awsserverlessrepo*
            Condition:
              StringLike:
                aws:CalledViaLast:
                  - lambda.amazonaws.com
          - Sid: FederatedDBGlueS3Permission
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::*
            Condition:
              StringEquals:
                aws:CalledViaLast:
                  - glue.amazonaws.com
                  - glue.gamma.amazonaws.com
                  - glue-gamma.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                s3:prefix: 'true'
          - Sid: FederatedDBAthenaCommonPermission
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Resource: arn:aws:cloudformation:*:*:stack/athenafederatedcatalog*
            Condition:
              'Null':
                aws:ResourceTag/federated_athena_datacatalog: 'false'
          - Sid: DataCatalogAccessForFederatedDatabase
            Effect: Allow
            Action:
              - athena:DeleteDataCatalog
              - athena:GetDataCatalog
              - athena:UpdateDataCatalog
            Resource: arn:aws:athena:*:*:datacatalog/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: IamPassConnectorRoleToLambdaForFederatedDataConnection
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/ConnectorManageAccessRole
              - arn:aws:iam::*:role/datazone_usr_role_*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService:
                  - lambda.amazonaws.com
          - Sid: GlueCatalogCreation
            Effect: Allow
            Action:
              - glue:CreateCatalog
            Resource:
              - arn:aws:glue:*:*:catalog
              - arn:aws:glue:*:*:catalog/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: GlueCatalogManagement
            Effect: Allow
            Action:
              - glue:GetCatalog
              - glue:GetCatalogs
              - glue:UpdateCatalog
              - glue:DeleteCatalog
              - glue:GetDatabase
            Resource:
              - arn:aws:glue:*:*:catalog
              - arn:aws:glue:*:*:catalog/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: RedShiftPermissionsForGlueCatalogs
            Effect: Allow
            Action:
              - redshift-serverless:CreateNamespace
              - redshift-serverless:CreateWorkgroup
              - redshift-serverless:DeleteNamespace
              - redshift-serverless:DeleteWorkgroup
              - redshift-serverless:ListTagsForResource
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: RedShiftDataSharePermissionsForGlueCatalogs
            Effect: Allow
            Action:
              - redshift:AssociateDataShareConsumer
              - redshift:AuthorizeDataShare
            Resource:
              - arn:aws:redshift:*:*:datashare:*/*
            Condition:
              ForAnyValue:StringLike:
                aws:CalledVia:
                  - redshift-serverless.amazonaws.com
                  - glue.gamma.amazonaws.com
                  - glue.amazonaws.com
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: RedShiftStagingBucketCreation
            Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:PutBucketPolicy
              - s3:PutEncryptionConfiguration
              - s3:PutLifecycleConfiguration
              - s3:PutBucketVersioning
              - s3:PutBucketTagging
            Resource: arn:aws:s3:::redshift-staging-bucket-*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: RedshiftServerlessTaggingForGlueCatalog
            Effect: Allow
            Action:
              - redshift-serverless:TagResource
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: SecurityGroupCreation
            Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
            Resource:
              - arn:aws:ec2:*:*:security-group/*
              - arn:aws:ec2:*:*:vpc/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:TagKeys: 'true'
          - Sid: SecurityGroupAuthorize
            Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
            Resource:
              - arn:aws:ec2:*:*:security-group/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: SecurityGroupManagement
            Effect: Allow
            Action:
              - ec2:DeleteSecurityGroup
              - ec2:RevokeSecurityGroupEgress
              - ec2:RevokeSecurityGroupIngress
            Resource:
              - arn:aws:ec2:*:*:security-group/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: SecurityGroupIngressRevokeForEMR
            Effect: Allow
            Action:
              - ec2:RevokeSecurityGroupIngress
            Resource:
              - arn:aws:ec2:*:*:security-group/*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'

  MaxDomeProvisioningPolicy5:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy5
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Action: ec2:CreateTags
            Resource:
              - arn:aws:ec2:*:*:security-group/*
              - arn:aws:ec2:*:*:vpc/*
              - arn:aws:ec2:*:*:subnet/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - for-use-with-amazon-emr-managed-policies
                  - aws:cloudformation:*
          - Sid: DescribeNetworksPermissions
            Effect: Allow
            Action:
              - ec2:DescribeVpcs
              - ec2:DescribeSecurityGroups
              - ec2:DescribeNatGateways
              - ec2:DescribeRouteTables
              - ec2:DescribeSubnets
            Resource: '*'
          - Sid: DescribeLogGroups
            Effect: Allow
            Action: logs:DescribeLogGroups
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: LogGroupCreation
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:TagResource
            Resource:
              - arn:aws:logs:*:*:log-group:datazone-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/br-studio-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/amazon-bedrock-ide-*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - AmazonBedrockManaged
          - Sid: LogGroupPutRetentionPolicy
            Effect: Allow
            Action: logs:PutRetentionPolicy
            Resource:
              - arn:aws:logs:*:*:log-group:datazone-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/br-studio-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/amazon-bedrock-ide-*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: ManageLogGroups
            Effect: Allow
            Action:
              - logs:DeleteLogGroup
              - logs:DeleteRetentionPolicy
              - logs:GetDataProtectionPolicy
              - logs:PutDataProtectionPolicy
              - logs:DeleteDataProtectionPolicy
              - logs:AssociateKmsKey
              - logs:DisassociateKmsKey
              - logs:ListTagsForResource
            Resource:
              - arn:aws:logs:*:*:log-group:datazone-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/br-studio-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/amazon-bedrock-ide-*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: AthenaWorkgroupCreationAndTagging
            Effect: Allow
            Action:
              - athena:CreateWorkGroup
              - athena:TagResource
            Resource: arn:aws:athena:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: AthenaWorkgroupDeletion
            Effect: Allow
            Action:
              - athena:DeleteWorkGroup
              - athena:GetWorkGroup
            Resource: arn:aws:athena:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: RedshiftServerlessCreationAndTagging
            Effect: Allow
            Action:
              - redshift-serverless:CreateNamespace
              - redshift-serverless:CreateWorkgroup
              - redshift-serverless:TagResource
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: RedshiftServerlessListTags
            Effect: Allow
            Action:
              - redshift-serverless:ListTagsForResource
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: AllowSecretManagement
            Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:DeleteSecret
              - secretsmanager:UpdateSecret
            Resource: '*'
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:ResourceTag/CreatedBy: 'false'
          - Sid: AllowSecretTagging
            Effect: Allow
            Action:
              - secretsmanager:TagResource
            Resource: '*'
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:ResourceTag/CreatedBy: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
                  - CreatedBy
          - Sid: ServiceLinkedRoleCreation
            Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource:
              - arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift
              - arn:aws:iam::*:role/aws-service-role/redshift.aws.internal/AWSServiceRoleForRedshiftInternal
              - arn:aws:iam::*:role/aws-service-role/sagemaker.amazonaws.com/AWSServiceRoleForAmazonSageMakerNotebooks
              - arn:aws:iam::*:role/aws-service-role/ops.emr-serverless.amazonaws.com/AWSServiceRoleForAmazonEMRServerless
              - arn:aws:iam::*:role/aws-service-role/airflow.amazonaws.com/AWSServiceRoleForAmazonMWAA
              - arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com/AWSServiceRoleForEMRCleanup
          - Sid: RedshiftServerlessCreationPermissions
            Effect: Allow
            Action:
              - redshift-serverless:ListNamespaces
              - redshift-serverless:ListWorkgroups
              - redshift:GetResourcePolicy
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: EC2PermissionsForGlueCatalog
            Effect: Allow
            Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAvailabilityZones
            Resource: '*'

  MaxDomeProvisioningPolicy6:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy6
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: RedshiftServerlessCreateDatabaseRole
            Effect: Allow
            Action:
              - redshift-data:ExecuteStatement
              - redshift:GetResourcePolicy
              - redshift-serverless:GetCredentials
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: RedshiftDataDescribeStatement
            Effect: Allow
            Action:
              - redshift-data:DescribeStatement
              - redshift-data:GetStatementResult
            Resource: '*'
          - Sid: RedshiftDatashareDescribe
            Effect: Allow
            Action:
              - redshift:DescribeDataSharesForConsumer
              - redshift:DescribeDataShares
            Resource: '*'
          - Sid: RedshiftServerlessValidation
            Effect: Allow
            Action:
              - redshift-serverless:GetNamespace
              - redshift-serverless:GetWorkgroup
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: RedshiftServerlessManagement
            Effect: Allow
            Action:
              - redshift-serverless:UpdateNamespace
              - redshift-serverless:UpdateWorkgroup
              - redshift-serverless:UntagResource
            Resource:
              - arn:aws:redshift-serverless:*:*:namespace/*
              - arn:aws:redshift-serverless:*:*:workgroup/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: GetRandomPasswordForSecret
            Effect: Allow
            Action: secretsmanager:GetRandomPassword
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: ManageSecretPermissionsForBedrockApp
            Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:CreateSecret
              - secretsmanager:UpdateSecret
              - secretsmanager:DeleteSecret
              - secretsmanager:GetResourcePolicy
              - secretsmanager:PutResourcePolicy
              - secretsmanager:DeleteResourcePolicy
              - secretsmanager:TagResource
            Resource:
              - arn:aws:secretsmanager:*:*:secret:br-studio/*
              - arn:aws:secretsmanager:*:*:secret:amazon-bedrock-ide/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: ManagedRedshiftAdminSecretPermissions
            Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:RotateSecret
              - secretsmanager:DescribeSecret
              - secretsmanager:UpdateSecret
              - secretsmanager:DeleteSecret
            Resource:
              - arn:aws:secretsmanager:*:*:secret:redshift!*
              - arn:aws:secretsmanager:*:*:secret:redshift-preprod!*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: ManagedRedshiftAdminSecretTaggingPermissions
            Effect: Allow
            Action:
              - secretsmanager:TagResource
            Resource:
              - arn:aws:secretsmanager:*:*:secret:redshift!*
              - arn:aws:secretsmanager:*:*:secret:redshift-preprod!*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - Redshift
                  - aws:secretsmanager:*
                  - aws:redshift-serverless:*
                  - AmazonDataZone*
                  - datazone.rs.workgroup
          - Sid: SageMakerDomainCreationAndTagging
            Effect: Allow
            Action:
              - sagemaker:CreateDomain
              - sagemaker:AddTags
            Resource: arn:aws:sagemaker:*:*:domain/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: SageMakerDomainDeletion
            Effect: Allow
            Action: sagemaker:DeleteDomain
            Resource: arn:aws:sagemaker:*:*:domain/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: SageMakerDomainManagement
            Effect: Allow
            Action:
              - sagemaker:ListDomains
              - sagemaker:DescribeDomain
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: SageMakerAppDeletion
            Effect: Allow
            Action: sagemaker:DeleteApp
            Resource:
              - arn:aws:sagemaker:*:*:app/*/*/jupyterlab/*
              - arn:aws:sagemaker:*:*:app/*/*/JupyterLab/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: SageMakerSpaceDeletion
            Effect: Allow
            Action: sagemaker:DeleteSpace
            Resource: arn:aws:sagemaker:*:*:space/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: SageMakerUserProfileDeletion
            Effect: Allow
            Action: sagemaker:DeleteUserProfile
            Resource: arn:aws:sagemaker:*:*:user-profile/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: EMRServerlessApplicationCreationAndTagging
            Effect: Allow
            Action:
              - emr-serverless:CreateApplication
              - emr-serverless:TagResource
            Resource:
              - arn:aws:emr-serverless:*:*:*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: EMRServerlessApplicationManagement
            Effect: Allow
            Action:
              - emr-serverless:GetApplication
              - emr-serverless:DeleteApplication
            Resource:
              - arn:aws:emr-serverless:*:*:/applications/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'

  MaxDomeProvisioningPolicy7:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy7
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CreateNetworkInterfaceForEMRServerless
            Effect: Allow
            Action: ec2:CreateNetworkInterface
            Resource:
              - arn:aws:ec2:*:*:network-interface/*
              - arn:aws:ec2:*:*:subnet/*
              - arn:aws:ec2:*:*:security-group/*
            Condition:
              StringEquals:
                aws:CalledViaLast: ops.emr-serverless.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: SageMakerMlflowTrackingServerCreation
            Effect: Allow
            Action:
              - sagemaker:CreateMlflowTrackingServer
              - sagemaker:AddTags
            Resource: arn:aws:sagemaker:*:*:mlflow-tracking-server/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: SageMakerMlflowTrackingServerDescribe
            Effect: Allow
            Action: sagemaker:DescribeMlflowTrackingServer
            Resource: arn:aws:sagemaker:*:*:mlflow-tracking-server/*
          - Sid: SageMakerMlflowTrackingServerDeletion
            Effect: Allow
            Action:
              - sagemaker:DeleteMlflowTrackingServer
            Resource: arn:aws:sagemaker:*:*:mlflow-tracking-server/*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: ManageAossAccessPoliciesForBedrock
            Effect: Allow
            Action:
              - aoss:GetAccessPolicy
              - aoss:CreateAccessPolicy
              - aoss:DeleteAccessPolicy
              - aoss:UpdateAccessPolicy
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
              StringLikeIfExists:
                aoss:collection:
                  - br-studio-*
                  - bedrock-ide-*
                aoss:index:
                  - br-studio-*
                  - bedrock-ide-*
          - Sid: ManageAossSecurityPoliciesForBedrock
            Effect: Allow
            Action:
              - aoss:GetSecurityPolicy
              - aoss:CreateSecurityPolicy
              - aoss:DeleteSecurityPolicy
              - aoss:UpdateSecurityPolicy
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
              StringLikeIfExists:
                aoss:collection:
                  - br-studio-*
                  - bedrock-ide-*
          - Sid: GetAossCollectionsForBedrock
            Effect: Allow
            Action: aoss:BatchGetCollection
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: ManageAossCollectionsForBedrock
            Effect: Allow
            Action:
              - aoss:CreateCollection
              - aoss:UpdateCollection
              - aoss:DeleteCollection
              - aoss:TagResource
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: GetBedrockCfnResourceDefinitionS3Permissions
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: arn:aws:s3:::*/dzd_*/*/genAI/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: GetBedrockResources
            Effect: Allow
            Action:
              - bedrock:GetAgent
              - bedrock:GetKnowledgeBase
              - bedrock:GetGuardrail
              - bedrock:GetPrompt
              - bedrock:GetFlow
              - bedrock:GetFlowAlias
              - bedrock:ListTagsForResource
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: ManageBedrockResources
            Effect: Allow
            Action:
              - bedrock:CreateAgent
              - bedrock:UpdateAgent
              - bedrock:PrepareAgent
              - bedrock:DeleteAgent
              - bedrock:ListAgentAliases
              - bedrock:GetAgentAlias
              - bedrock:CreateAgentAlias
              - bedrock:UpdateAgentAlias
              - bedrock:DeleteAgentAlias
              - bedrock:ListAgentActionGroups
              - bedrock:GetAgentActionGroup
              - bedrock:CreateAgentActionGroup
              - bedrock:UpdateAgentActionGroup
              - bedrock:DeleteAgentActionGroup
              - bedrock:ListAgentKnowledgeBases
              - bedrock:GetAgentKnowledgeBase
              - bedrock:AssociateAgentKnowledgeBase
              - bedrock:DisassociateAgentKnowledgeBase
              - bedrock:UpdateAgentKnowledgeBase
              - bedrock:CreateKnowledgeBase
              - bedrock:UpdateKnowledgeBase
              - bedrock:DeleteKnowledgeBase
              - bedrock:ListDataSources
              - bedrock:GetDataSource
              - bedrock:CreateDataSource
              - bedrock:UpdateDataSource
              - bedrock:DeleteDataSource
              - bedrock:CreateGuardrail
              - bedrock:UpdateGuardrail
              - bedrock:DeleteGuardrail
              - bedrock:CreateGuardrailVersion
              - bedrock:CreatePrompt
              - bedrock:UpdatePrompt
              - bedrock:DeletePrompt
              - bedrock:CreatePromptVersion
              - bedrock:CreateFlow
              - bedrock:UpdateFlow
              - bedrock:PrepareFlow
              - bedrock:DeleteFlow
              - bedrock:ListFlowAliases
              - bedrock:GetFlowAlias
              - bedrock:CreateFlowAlias
              - bedrock:UpdateFlowAlias
              - bedrock:DeleteFlowAlias
              - bedrock:ListFlowVersions
              - bedrock:GetFlowVersion
              - bedrock:CreateFlowVersion
              - bedrock:DeleteFlowVersion
              - bedrock:TagResource
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: TagBedrockTestAliases
            Effect: Allow
            Action: bedrock:TagResource
            Resource:
              - arn:aws:bedrock:*:*:agent-alias/*/TSTALIASID
              - arn:aws:bedrock:*:*:flow/*/alias/TSTALIASID
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: ListBedrockEvaluationJobsFromServicePermissions
            Effect: Allow
            Action: bedrock:ListEvaluationJobs
            Resource: '*'
          - Sid: ManageBedrockEvaluationJobsFromServicePermissions
            Effect: Allow
            Action: bedrock:BatchDeleteEvaluationJob
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'

  MaxDomeProvisioningPolicy8:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeProvisioningPolicy8
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CreateFunctionPermissionsForBedrockApp
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:InvokeFunction
              - lambda:DeleteFunction
              - lambda:UpdateFunctionCode
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionConfiguration
              - lambda:ListVersionsByFunction
              - lambda:PublishVersion
              - lambda:GetPolicy
              - lambda:AddPermission
              - lambda:TagResource
            Resource:
              - arn:aws:lambda:*:*:function:br-studio-*
              - arn:aws:lambda:*:*:function:amazon-bedrock-ide-*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: ManageFunctionPermissionsForBedrockApp
            Effect: Allow
            Action:
              - lambda:GetFunction
              - lambda:ListTags
              - lambda:RemovePermission
            Resource:
              - arn:aws:lambda:*:*:function:br-studio-*
              - arn:aws:lambda:*:*:function:amazon-bedrock-ide-*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: EMRSecurityConfigurationManagement
            Effect: Allow
            Action:
              - elasticmapreduce:CreateSecurityConfiguration
              - elasticmapreduce:DeleteSecurityConfiguration
            Resource: '*'
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
          - Sid: EMRClusterManagement
            Effect: Allow
            Action:
              - elasticmapreduce:AddJobFlowSteps
              - elasticmapreduce:AddTags
              - elasticmapreduce:DescribeJobFlows
              - elasticmapreduce:ListInstanceFleets
              - elasticmapreduce:RunJobFlow
              - elasticmapreduce:SetTerminationProtection
              - elasticmapreduce:TerminateJobFlows
              - elasticmapreduce:DescribeCluster
            Resource: arn:aws:elasticmapreduce:*:*:cluster/*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: AirflowEnvironmentActions
            Effect: Allow
            Action:
              - airflow:CreateEnvironment
              - airflow:DeleteEnvironment
              - airflow:TagResource
            Resource: '*'
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: AirflowEnvironmentActionsWithoutRestrictions
            Effect: Allow
            Action:
              - airflow:GetEnvironment
            Resource: '*'
          - Sid: AirflowS3BucketActions
            Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
            Resource:
              - arn:aws:s3:::*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: AirflowVpcEndpointActions
            Effect: Allow
            Action:
              - ec2:CreateVpcEndpoint
            Resource:
              - arn:aws:ec2:*:*:vpc-endpoint/*
              - arn:aws:ec2:*:*:vpc/*
              - arn:aws:ec2:*:*:subnet/*
              - arn:aws:ec2:*:*:security-group/*
          - Sid: AirflowNetworkInterfaceActions
            Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
            Resource:
              - arn:aws:ec2:*:*:subnet/*
              - arn:aws:ec2:*:*:network-interface/*
          - Sid: AirflowKmsCreateGrant
            Effect: Allow
            Action:
              - kms:CreateGrant
            Resource: '*'
            Condition:
              StringLike:
                kms:ViaService:
                  - airflow.*.amazonaws.com
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                kms:EncryptionContextKeys: 'false'
          - Sid: AirflowKmsDescribeKey
            Effect: Allow
            Action:
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: IamRoleProvisioningRolePermissionsForSageMakerUnifiedStudioQueryExecutionRole
            Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:TagRole
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
            Resource: arn:aws:iam::*:role/SageMakerUnifiedStudioQueryExecutionRole
            Effect: Allow
          - Sid: IamRoleProvisioningRolePermissionsForSageMakerUnifiedStudioQueryExecutionRolePolicy
            Action:
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:ListPolicies
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:CreatePolicyVersion
              - iam:ListPolicyVersions
              - iam:DeletePolicyVersion
            Effect: Allow
            Resource: arn:aws:iam::*:policy/SageMakerUnifiedStudioQueryExecutionRolePolicy

  MaxDomeSageMakerNonProdDomainPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeProvisioningRole
      ManagedPolicyName: MaxDomeSageMakerNonProdDomainPolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: IAMRoleAndPolicyManagement
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
            Resource:
              - arn:aws:iam::*:role/maxdome_sagemaker_nonprod_domain_lambda_role_*
              - arn:aws:iam::*:role/datazone_sagemaker_nonprod_domain_lambda_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IAMRoleTagging
            Effect: Allow
            Action: iam:TagRole
            Resource:
              - arn:aws:iam::*:role/maxdome_sagemaker_nonprod_domain_lambda_role_*
              - arn:aws:iam::*:role/datazone_sagemaker_nonprod_domain_lambda_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:TagKeys: 'false'
              ForAllValues:StringLike:
                aws:TagKeys:
                  - AmazonDataZone*
          - Sid: SageMakerNonProdDomainCreation
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:InvokeFunction
              - lambda:DeleteFunction
              - lambda:UpdateFunctionCode
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionConfiguration
              - lambda:ListVersionsByFunction
              - lambda:PublishVersion
              - lambda:GetPolicy
              - lambda:AddPermission
              - lambda:TagResource
            Resource:
              - arn:aws:lambda:*:*:function:*
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:CalledViaLast: cloudformation.amazonaws.com
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: IamPassRoleToLambda
            Effect: Allow
            Action: iam:PassRole
            Resource:
            - arn:aws:iam::*:role/maxdome_sagemaker_nonprod_domain_lambda_role*
            - arn:aws:iam::*:role/datazone_sagemaker_nonprod_domain_lambda_role_*
            Condition:
              StringEquals:
                aws:CalledViaFirst: cloudformation.amazonaws.com
                aws:ResourceAccount: ${aws:PrincipalAccount}
                iam:PassedToService: lambda.amazonaws.com

  MaxDomeDomainExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Domain execution role for MaxDome.
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              - 'sts:TagSession'
              - 'sts:SetContext'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub '${AWS::AccountId}'
              ForAllValues:StringLike:
                aws:TagKeys: datazone*
      RoleName: MaxDomeDomainExecutionRole
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true

  MaxDomeDomainExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeDomainExecutionRole
      ManagedPolicyName: MaxDomeDomainExecutionPolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DataZonePermissions
            Effect: Allow
            Action:
              - datazone:AcceptPredictions
              - datazone:AcceptSubscriptionRequest
              - datazone:AddEntityOwner
              - datazone:AddPolicyGrant
              - datazone:CancelMetadataGenerationRun
              - datazone:CancelSubscription
              - datazone:CreateAsset
              - datazone:CreateAssetFilter
              - datazone:CreateAssetRevision
              - datazone:CreateAssetType
              - datazone:CreateConnection
              - datazone:CreateDataProduct
              - datazone:CreateDataProductRevision
              - datazone:CreateDataSource
              - datazone:CreateDomainUnit
              - datazone:CreateEnvironment
              - datazone:CreateEnvironmentProfile
              - datazone:CreateFormType
              - datazone:CreateGlossary
              - datazone:CreateGlossaryTerm
              - datazone:CreateListingChangeSet
              - datazone:CreateProject
              - datazone:CreateProjectMembership
              - datazone:CreateSubscriptionGrant
              - datazone:CreateSubscriptionRequest
              - datazone:DeleteAsset
              - datazone:DeleteAssetFilter
              - datazone:DeleteAssetType
              - datazone:DeleteConnection
              - datazone:DeleteDataProduct
              - datazone:DeleteDataSource
              - datazone:DeleteDomainUnit
              - datazone:DeleteEnvironment
              - datazone:DeleteEnvironmentProfile
              - datazone:DeleteFormType
              - datazone:DeleteGlossary
              - datazone:DeleteGlossaryTerm
              - datazone:DeleteListing
              - datazone:DeleteProject
              - datazone:DeleteProjectMembership
              - datazone:DeleteSubscriptionGrant
              - datazone:DeleteSubscriptionRequest
              - datazone:DeleteSubscriptionTarget
              - datazone:DeleteTimeSeriesDataPoints
              - datazone:GetAsset
              - datazone:GetAssetFilter
              - datazone:GetAssetType
              - datazone:GetConnection
              - datazone:GetDataProduct
              - datazone:GetDataSource
              - datazone:GetDataSourceRun
              - datazone:GetDomain
              - datazone:GetDomainUnit
              - datazone:GetEnvironment
              - datazone:GetEnvironmentAction
              - datazone:GetEnvironmentActionLink
              - datazone:GetEnvironmentBlueprint
              - datazone:GetEnvironmentBlueprintConfiguration
              - datazone:GetEnvironmentCredentials
              - datazone:GetEnvironmentProfile
              - datazone:GetFormType
              - datazone:GetGlossary
              - datazone:GetGlossaryTerm
              - datazone:GetGroupProfile
              - datazone:GetLineageNode
              - datazone:GetListing
              - datazone:GetMetadataGenerationRun
              - datazone:GetProject
              - datazone:GetSubscription
              - datazone:GetSubscriptionEligibility
              - datazone:GetSubscriptionGrant
              - datazone:GetSubscriptionRequestDetails
              - datazone:GetSubscriptionTarget
              - datazone:GetTimeSeriesDataPoint
              - datazone:GetUserProfile
              - datazone:ListAccountEnvironments
              - datazone:ListAssetFilters
              - datazone:ListAssetRevisions
              - datazone:ListConnections
              - datazone:ListDataProductRevisions
              - datazone:ListDataSourceRunActivities
              - datazone:ListDataSourceRuns
              - datazone:ListDataSources
              - datazone:ListDomainUnitsForParent
              - datazone:ListEntityOwners
              - datazone:ListEnvironmentActions
              - datazone:ListEnvironmentBlueprintConfigurationSummaries
              - datazone:ListEnvironmentBlueprintConfigurations
              - datazone:ListEnvironmentBlueprints
              - datazone:ListEnvironmentProfiles
              - datazone:ListEnvironments
              - datazone:ListGroupsForUser
              - datazone:ListLineageNodeHistory
              - datazone:ListMetadataGenerationRuns
              - datazone:ListNotifications
              - datazone:ListPolicyGrants
              - datazone:ListProjectMemberships
              - datazone:ListProjects
              - datazone:ListSubscriptionGrants
              - datazone:ListSubscriptionRequests
              - datazone:ListSubscriptionTargets
              - datazone:ListSubscriptions
              - datazone:ListTimeSeriesDataPoints
              - datazone:ListWarehouseMetadata
              - datazone:RejectPredictions
              - datazone:RejectSubscriptionRequest
              - datazone:RemoveEntityOwner
              - datazone:RemovePolicyGrant
              - datazone:RevokeSubscription
              - datazone:Search
              - datazone:SearchGroupProfiles
              - datazone:SearchListings
              - datazone:SearchTypes
              - datazone:SearchUserProfiles
              - datazone:StartDataSourceRun
              - datazone:StartMetadataGenerationRun
              - datazone:UpdateAssetFilter
              - datazone:UpdateConnection
              - datazone:UpdateDataSource
              - datazone:UpdateDomainUnit
              - datazone:UpdateEnvironment
              - datazone:UpdateEnvironmentDeploymentStatus
              - datazone:UpdateEnvironmentProfile
              - datazone:UpdateGlossary
              - datazone:UpdateGlossaryTerm
              - datazone:UpdateProject
              - datazone:UpdateSubscriptionGrantStatus
              - datazone:UpdateSubscriptionRequest
            Resource: '*'
          - Sid: RAMResourceShareStatement
            Effect: Allow
            Action:
              - ram:GetResourceShareAssociations
              - ram:GetResourceShares
            Resource: '*'
          - Sid: AmazonQPermissionsStatement
            Effect: Allow
            Action:
              - q:StartConversation
              - q:SendMessage
              - q:ListConversations
              - q:GetConversation
              - q:PassRequest
              - glue:StartCompletion
              - glue:GetCompletion
            Resource: '*'
          - Sid: AllowSetTrustedIdentity
            Effect: Allow
            Action:
              - sts:SetContext
            Resource:
              - !Sub 'arn:aws:sts::*:self'
          - Sid: SSMGetParameterStatement
            Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - 'arn:aws:ssm:*:*:parameter/amazon/datazone/q/${aws:PrincipalTag/datazone-domainId}*'
              - 'arn:aws:ssm:*:*:parameter/amazon/datazone/genAI/${aws:PrincipalTag/datazone-domainId}/*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
          - Sid: ListCodeConnectionsPermissionsStatement
            Effect: Allow
            Action:
              - codeconnections:ListConnections
              - codeconnections:ListTagsForResource
              - codestar-connections:ListConnections
              - codestar-connections:ListTagsForResource
            Resource: '*'
          - Sid: UseCodeConnectionsPermissionsStatement
            Effect: Allow
            Action:
              - codeconnections:UseConnection
              - codestar-connections:UseConnection
            Resource: '*'
            Condition:
              'Null':
                aws:ResourceTag/for-use-with-all-datazone-projects: 'false'
              StringEquals:
                aws:ResourceTag/for-use-with-all-datazone-projects: 'true'
          - Sid: ProjectProfilePermissionsStatement
            Effect: Allow
            Action:
              - datazone:GetProjectProfile
              - datazone:ListProjectProfiles
            Resource: 'arn:aws:datazone:*:*:domain/*'

  MaxDomePermissionBoundary:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Permission boundary for MaxDome user role.
        ManagedPolicyName: !Sub 'maxdome-permission-boundary'
        Path: '/maxdome/'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: S3
              Action:
                - s3:List*
                - s3:Describe*
                - s3:GetObject*
                - s3:DeleteObjectVersion
                - s3:RestoreObject
                - s3:ReplicateObject
                - s3:PutObject*
                - s3:AbortMultipartUpload
                - s3:PutObjectRetention
                - s3:DeleteObject
                - s3:PutBucketPublicAccessBlock
                - s3:PutLifecycleConfiguration
              Effect: Allow
              Resource:
                - arn:*:s3:::*/dzd*
                - arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}*
            - Sid: DenyAllNonMatchingTags
              Effect: Deny
              Action: '*'
              NotResource:
                - arn:*:sagemaker:*:*:model-package-group/*
                - arn:*:sagemaker:*:*:model-package/*"
              Condition:
                'Null':
                  aws:ResourceTag/DataZoneEnvironmentProjectId: 'false'
                StringNotEquals:
                  aws:ResourceTag/DataZoneEnvironmentProjectId: ${aws:PrincipalTag/DataZoneEnvironmentProjectId}
            - Sid: PermissionsWithoutRestrictions
              Action:
                - q:StartConversation
                - q:SendMessage
                - s3:Get*
                - s3:List*
                - s3:*Object*
                - kms:List*
                - kms:Get*
                - kms:Describe*
                - kms:Decrypt
                - kms:RevokeGrant
                - kms:ReEncrypt*
                - logs:Describe*
                - logs:PutLogEvents
                - logs:Create*
                - logs:Get*
                - athena:List*
                - athena:Get*
                - athena:Create*
                - athena:TagResource
                - datazone:*
                - glue:*Table
                - glue:*Partition
                - glue:BatchGet*
                - glue:Get*
                - glue:SearchTables
                - glue:List*
                - glue:Describe*
                - glue:CreatePartitionIndex
                - glue:BatchUpdatePartition
                - glue:DeleteTableVersion
                - glue:DeleteColumnStatisticsForPartition
                - glue:DeleteColumnStatisticsForTable
                - glue:DeletePartitionIndex
                - glue:UpdateColumnStatisticsForPartition
                - glue:UpdateColumnStatisticsForTable
                - glue:BatchDeleteTableVersion
                - glue:UseGlueStudio
                - glue:NotifyEvent
                - glue:*Workflow*
                - glue:*Job*
                - glue:*Blueprint*
                - glue:*DataQuality*
                - lakeformation:GetDataAccess
                - iam:List*
                - iam:Get*
                - iam:PassRole
                - sqlworkbench:*
                - redshift-data:DescribeStatement
                - redshift-data:GetStatementResult
                - redshift-data:CancelStatement
                - redshift-data:ListStatements
                - redshift-data:BatchExecuteStatement
                - redshift-data:ExecuteStatement
                - redshift-serverless:List*
                - redshift-serverless:Describe*
                - redshift:Describe*
                - tag:GetResources
                - codewhisperer:GenerateRecommendations
                - aoss:APIAccessAll
                - bedrock:*
                - lambda:CreateFunction
                - lambda:DeleteFunction
                - lambda:GetFunction
                - lambda:InvokeFunction
                - lambda:TagResource
                - cloudformation:Get*
                - cloudformation:Describe*
                - ec2:AttachNetworkInterface
                - ec2:Create*
                - ec2:Describe*
                - ec2:Delete*
                - ec2:RunInstances
                - ec2:*NetworkInterfacePermission
                - application-autoscaling:*
                - resource-groups:ListGroupResources
                - glue:CreateSession
                - glue:CancelStatement
                - glue:DeleteSession
                - glue:RunStatement
                - glue:StopSession
                - glue:UntagResource
                - glue:TagResource
                - sagemaker:List*
                - sagemaker:Describe*
                - sagemaker:AddTags
                - sagemaker:AddAssociation
                - sagemaker:UpdateSpace
                - sagemaker:Create*
                - sagemaker:Stop*
                - sagemaker:StartPipelineExecution
                - sagemaker:UpdatePipeline
                - sagemaker:UpdatePipelineExecution
                - sageMaker:RetryPipelineExecution
                - sagemaker:UpdateTrainingJob
                - sagemaker:BatchGetMetrics
                - sagemaker:Delete*
                - sagemaker:UpdateEndpoint
                - sagemaker:UpdateEndpointWeightsAndCapacities
                - sagemaker:BatchDescribeModelPackage
                - sagemaker:UpdateModelPackage
                - sagemaker:QueryLineage
                - sagemaker:SendPipelineExecutionStepSuccess
                - sagemaker:SendPipelineExecutionStepFailure
                - sagemaker:InvokeEndpoint
                - sagemaker:InvokeEndpointAsync
                - sagemaker:InvokeEndpointWithResponseStream
                - sagemaker:*InferenceComponent
                - sagemaker:CallPartnerAppApi
                - sagemaker:Search
                - sagemaker:GetSearchSuggestions
                - serverlessrepo:*
                - cloudformation:DeleteChangeSet
                - cloudformation:CreateChangeSet
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:DescribeStacks
                - cloudwatch:PutMetric*
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarms
                - cloudwatch:GetMetric*
                - ecr:Get*
                - ecr:BatchGetImage
                - ecr:DescribeImages
                - sts:AssumeRole
                - sts:SetSourceIdentity
                - sts:GetCallerIdentity
                - glue:StartCompletion
                - secretsmanager:*
                - redshift:Describe*
                - emr-serverless:*
                - elasticmapreduce:List*
                - elasticfilesystem:DescribeMountTargets
                - ssm:GetParameter*
                - kms:CreateGrant
                - kms:Encrypt
                - kms:GenerateDataKey*
                - airflow:*
                - sqs:*
                - resource-groups:*
                - dynamodb:*
                - es:*
              Effect: Allow
              Resource: '*'
            - Sid: PermissionsWithTagRestrictions
              Action:
                - logs:*
                - ec2:AuthorizeSecurityGroupEgress
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:RevokeSecurityGroupEgress
                - ec2:RevokeSecurityGroupIngress
                - athena:*
                - glue:PassConnection
                - redshift-data:BatchExecuteStatement
                - redshift-data:ExecuteStatement
                - redshift-data:DescribeTable
                - redshift-data:List*
                - redshift-serverless:Get*
                - redshift-serverless:ListTagsForResource
                - redshift-data:*
                - codecommit:*
                - pricing:GetProducts
                - sagemaker-mlflow:*
                - sagemaker:*MlflowTrackingServer*
                - elasticmapreduce:DescribeCluster
                - elasticmapreduce:List*
                - elasticmapreduce:TerminateJobFlows
                - elasticmapreduce:Get*
                - sagemaker-mlflow:*
                - sagemaker:*MlflowTrackingServer*
              Effect: Allow
              Resource: '*'
              Condition:
                'Null':
                  aws:ResourceTag/AmazonDataZoneProject: 'false'
            - Sid: GlueGlobalTemp
              Effect: Allow
              Action:
                - glue:CreateDatabase
                - glue:DeleteDatabase
              Resource:
                - arn:aws:glue:*:*:database/global_temp
                - arn:aws:glue:*:*:catalog
                - arn:aws:glue:*:*:database/*
                - arn:aws:glue:*:*:catalog/*
            - Sid: PermissionsWithUserAddedTagRestrictions
              Action: 
                - redshift-serverless:List*
                - redshift-serverless:Get*
                - redshift:GetClusterCredentialsWithIAM
              Effect: Allow
              Resource: '*'
              Condition:
                StringEquals:
                  aws:ResourceTag/for-use-with-all-datazone-projects: 'true'
            - Sid: RedshifServerlessCredentialsForManagedWorkgroup
              Effect: Allow
              Action:
                - redshift-serverless:GetCredentials
              Resource: arn:aws:redshift-serverless:*:*:workgroup/*
              Condition:
                ForAnyValue:StringLike:
                  aws:InvokedBy:
                    - redshift-data.amazonaws.com
                    - preprod.redshift-data.aws.internal
                Bool:
                  aws:ViaAWSService: true
            - Sid: RedshiftExistingComputeConnectToCatalog
              Effect: Allow
              Action:
                - redshift:GetClusterCredentialsWithIAM
              Resource: arn:aws:redshift:*:*:dbname:*/*
              Condition:
                Bool:
                  aws:ViaAWSService: true
  BedrockStudioPermissionsBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AmazonDataZoneBedrockPermissionsBoundary
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ListDomainS3BucketPermissions
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource: arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}
            Condition:
              StringLike:
                s3:prefix:
                  - ${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}
                  - ${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}/*
              StringNotEquals:
                aws:PrincipalTag/DomainBucketName: ''
                aws:PrincipalTag/AmazonDataZoneDomain: ''
                aws:PrincipalTag/AmazonDataZoneProject: ''
          - Sid: AccessDomainS3BucketPermissions
            Effect: Allow
            Action:
              - s3:GetObject*
              - s3:PutObject
              - s3:PutObjectRetention
              - s3:RestoreObject
              - s3:ReplicateObject
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource: arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}/${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}/*
            Condition:
              StringNotEquals:
                aws:PrincipalTag/DomainBucketName: ''
                aws:PrincipalTag/AmazonDataZoneDomain: ''
                aws:PrincipalTag/AmazonDataZoneProject: ''
          - Sid: AccessOpenSearchCollections
            Effect: Allow
            Action: aoss:APIAccessAll
            Resource: '*'
          - Sid: BedrockAppInferenceProfileInvocationPermissions
            Effect: Allow
            Action:
              - bedrock:GetInferenceProfile
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: arn:aws:bedrock:*:*:application-inference-profile/*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: BedrockModelInvocationPermissions
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - arn:aws:bedrock:*:*:*-model/*
              - arn:aws:bedrock:*:*:inference-profile/*
          - Sid: AccessBedrockResources
            Effect: Allow
            Action:
              - bedrock:InvokeAgent
              - bedrock:Retrieve
              - bedrock:StartIngestionJob
              - bedrock:GetIngestionJob
              - bedrock:ListIngestionJobs
              - bedrock:ApplyGuardrail
              - bedrock:ListPrompts
              - bedrock:GetPrompt
              - bedrock:CreatePrompt
              - bedrock:DeletePrompt
              - bedrock:CreatePromptVersion
              - bedrock:InvokeFlow
              - bedrock:ListTagsForResource
              - bedrock:TagResource
            Resource: '*'
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: RetrieveAndGenerate
            Effect: Allow
            Action: bedrock:RetrieveAndGenerate
            Resource: '*'
          - Sid: WriteLogs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/br-studio-*
              - arn:aws:logs:*:*:log-group:/aws/lambda/amazon-bedrock-ide-*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: InvokeLambdaFunctions
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              - arn:aws:lambda:*:*:function:br-studio-*
              - arn:aws:lambda:*:*:function:amazon-bedrock-ide-*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: AccessSecretsManagerSecrets
            Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource:
              - arn:aws:secretsmanager:*:*:secret:br-studio/*
              - arn:aws:secretsmanager:*:*:secret:amazon-bedrock-ide/*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: GetDataZoneEnvironmentCfnStacks
            Effect: Allow
            Action:
              - cloudformation:GetTemplate
              - cloudformation:DescribeStacks
            Resource: arn:aws:cloudformation:*:*:stack/DataZone-Env-*
            Condition:
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: KmsPermissions
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
            Condition:
              StringLike:
                kms:ViaService:
                  - s3.*.amazonaws.com
                  - bedrock.*.amazonaws.com
                  - secretsmanager.*.amazonaws.com
  MaxDomeBedrockModelManagementRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Provides permissions to manage Amazon Bedrock model access, including creating, tagging and deleting application inference profiles.
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              - 'sts:SetContext'
      RoleName: MaxDomeBedrockModelManagementRole
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true
  MaxDomeBedrockModelManagementPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeBedrockModelManagementRole
      ManagedPolicyName: MaxDomeBedrockModelManagementPolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ManageApplicationInferenceProfile
            Effect: Allow
            Action:
              - bedrock:CreateInferenceProfile
              - bedrock:TagResource
            Resource: 'arn:aws:bedrock:*:*:application-inference-profile/*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              ForAnyValue:StringEquals:
                aws:TagKeys: 'AmazonDataZoneProject'
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
                aws:RequestTag/AmazonDataZoneProject: 'false'
          - Sid: DeleteApplicationInferenceProfile
            Effect: Allow
            Action:
              - bedrock:DeleteInferenceProfile
            Resource: 'arn:aws:bedrock:*:*:application-inference-profile/*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'false'
          - Sid: CreateApplicationInferenceProfileUsingFoundationModels
            Effect: Allow
            Action:
              - bedrock:CreateInferenceProfile
            Resource: 'arn:aws:bedrock:*::foundation-model/*'
          - Sid: CreateApplicationInferenceProfileUsingBedrockModels
            Effect: Allow
            Action:
              - bedrock:CreateInferenceProfile
            Resource: 'arn:aws:bedrock:*:*:inference-profile/*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
  MaxDomeBedrockModelConsumptionRoleOneForAll:
    Type: AWS::IAM::Role
    Properties:
      Description: Provides permissions to consume Amazon Bedrock models, including invoking Amazon Bedrock application inference profile created for particular Amazon DataZone domain.
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - datazone.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              - 'sts:SetContext'
      RoleName: MaxDomeBedrockModelConsumptionRoleOneForAll
      Tags:
        - Key: CreatedForUseWithMaxDome
          Value: true
  
  MaxDomeBedrockModelConsumptionPolicyOneForAll:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeBedrockModelConsumptionRoleOneForAll
      ManagedPolicyName: MaxDomeBedrockModelConsumptionPolicyOneForAll
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowInferenceProfileToInvokeFoundationModels
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: 'arn:aws:bedrock:*::foundation-model/*'
            Condition:
              ArnLike:
                bedrock:InferenceProfileArn: arn:aws:bedrock:*:*:application-inference-profile/*

  MaxDomeBedrockModelConsumptionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MaxDomeBedrockModelConsumptionRoleOneForAll
      ManagedPolicyName: MaxDomeBedrockModelConsumptionPolicy
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: InvokeDomainInferenceProfiles
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: 'arn:aws:bedrock:*:*:application-inference-profile/*'
            Condition:
              StringEquals:
                aws:ResourceAccount: ${aws:PrincipalAccount}
                aws:ResourceTag/AmazonDataZoneDomain: ${datazone:domainId}
              'Null':
                aws:ResourceTag/AmazonDataZoneProject: 'true'          
